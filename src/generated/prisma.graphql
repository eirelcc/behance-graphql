# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Collection implements Node {
  id: ID!
  title: String!
  owners(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  stats(where: CollectionStatsWhereInput): CollectionStats!
  images: [String!]
  created_on: Int!
  modified_on: Int!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
}

type Field implements Node {
  id: ID!
  name: String!
}

type Project implements Node {
  id: ID!
  name: String!
  published_on: Int!
  created_on: Int!
  modified_on: Int!
  url: String!
  fields: [String!]
  mature_content: Int!
  owners(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  stats(where: ProjectsStatsWhereInput): ProjectsStats!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type Revision implements Node {
  id: ID!
  created_on: Int!
  description: String!
  number: Int!
  images(where: RevisionImageWhereInput, orderBy: RevisionImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RevisionImage!]
  short_url: String!
  tags: [String!]
  url: String!
  wip_id: ID!
}

type SU implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type User implements Node {
  id: ID!
  first_name: String!
  last_name: String!
  username: String!
  city: String
  state: String
  country: String
  company: String
  occupation: String
  created_on: Int!
  url: String!
  display_name: String!
  fields: [String!]
  twitter: String
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  wips(where: WipWhereInput, orderBy: WipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Wip!]
  appreciations(where: AppreciationWhereInput, orderBy: AppreciationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Appreciation!]
  collections(where: CollectionWhereInput, orderBy: CollectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Collection!]
  stats(where: UserStatsByPeriodWhereInput): UserStatsByPeriod!
  followers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  following(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  workExperience(where: WorkExperienceWhereInput, orderBy: WorkExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkExperience!]
}

type Wip implements Node {
  id: ID!
  created_on: Int!
  owner(where: UserWhereInput): User!
  privacy: String!
  revisions(where: RevisionWhereInput, orderBy: RevisionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Revision!]
  stats(where: WipStatsWhereInput): WipStats!
  title: String
  url: String
}


#
# Other Types
#

type AggregateAppreciation {
  count: Int!
}

type AggregateCollection {
  count: Int!
}

type AggregateCollectionStats {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateField {
  count: Int!
}

type AggregateLink {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateProjectsStats {
  count: Int!
}

type AggregateRevision {
  count: Int!
}

type AggregateRevisionImage {
  count: Int!
}

type AggregateRevisionImageCollection {
  count: Int!
}

type AggregateSU {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserStats {
  count: Int!
}

type AggregateUserStatsByPeriod {
  count: Int!
}

type AggregateWip {
  count: Int!
}

type AggregateWipStats {
  count: Int!
}

type AggregateWorkExperience {
  count: Int!
}

type Appreciation {
  project(where: ProjectWhereInput): Project!
  timestamp: Int!
}

"""
A connection to a list of items.
"""
type AppreciationConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [AppreciationEdge]!
  aggregate: AggregateAppreciation!
}

input AppreciationCreateInput {
  timestamp: Int!
  project: ProjectCreateOneInput!
}

input AppreciationCreateManyInput {
  create: [AppreciationCreateInput!]
}

"""
An edge in a connection.
"""
type AppreciationEdge {
  """
  The item at the end of the edge.
  """
  node: Appreciation!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum AppreciationOrderByInput {
  timestamp_ASC
  timestamp_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AppreciationPreviousValues {
  timestamp: Int!
}

type AppreciationSubscriptionPayload {
  mutation: MutationType!
  node: Appreciation
  updatedFields: [String!]
  previousValues: AppreciationPreviousValues
}

input AppreciationSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AppreciationSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [AppreciationSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AppreciationWhereInput
}

input AppreciationUpdateInput {
  timestamp: Int
  project: ProjectUpdateOneInput
}

input AppreciationUpdateManyInput {
  create: [AppreciationCreateInput!]
}

input AppreciationWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AppreciationWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [AppreciationWhereInput!]
  timestamp: Int
  """
  All values that are not equal to given value.
  """
  timestamp_not: Int
  """
  All values that are contained in given list.
  """
  timestamp_in: [Int!]
  """
  All values that are not contained in given list.
  """
  timestamp_not_in: [Int!]
  """
  All values less than the given value.
  """
  timestamp_lt: Int
  """
  All values less than or equal the given value.
  """
  timestamp_lte: Int
  """
  All values greater than the given value.
  """
  timestamp_gt: Int
  """
  All values greater than or equal the given value.
  """
  timestamp_gte: Int
  project: ProjectWhereInput
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type CollectionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CollectionEdge]!
  aggregate: AggregateCollection!
}

input CollectionCreateimagesInput {
  set: [String!]
}

input CollectionCreateInput {
  title: String!
  created_on: Int!
  modified_on: Int!
  images: CollectionCreateimagesInput
  owners: UserCreateManyWithoutCollectionsInput
  stats: CollectionStatsCreateOneInput!
  projects: ProjectCreateManyInput
}

input CollectionCreateManyWithoutOwnersInput {
  create: [CollectionCreateWithoutOwnersInput!]
  connect: [CollectionWhereUniqueInput!]
}

input CollectionCreateWithoutOwnersInput {
  title: String!
  created_on: Int!
  modified_on: Int!
  images: CollectionCreateimagesInput
  stats: CollectionStatsCreateOneInput!
  projects: ProjectCreateManyInput
}

"""
An edge in a connection.
"""
type CollectionEdge {
  """
  The item at the end of the edge.
  """
  node: Collection!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CollectionOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  created_on_ASC
  created_on_DESC
  modified_on_ASC
  modified_on_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CollectionPreviousValues {
  id: ID!
  title: String!
  images: [String!]
  created_on: Int!
  modified_on: Int!
}

type CollectionStats {
  items: Int!
  followers: Int!
}

"""
A connection to a list of items.
"""
type CollectionStatsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CollectionStatsEdge]!
  aggregate: AggregateCollectionStats!
}

input CollectionStatsCreateInput {
  items: Int!
  followers: Int!
}

input CollectionStatsCreateOneInput {
  create: CollectionStatsCreateInput
}

"""
An edge in a connection.
"""
type CollectionStatsEdge {
  """
  The item at the end of the edge.
  """
  node: CollectionStats!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CollectionStatsOrderByInput {
  items_ASC
  items_DESC
  followers_ASC
  followers_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CollectionStatsPreviousValues {
  items: Int!
  followers: Int!
}

type CollectionStatsSubscriptionPayload {
  mutation: MutationType!
  node: CollectionStats
  updatedFields: [String!]
  previousValues: CollectionStatsPreviousValues
}

input CollectionStatsSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CollectionStatsSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CollectionStatsSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CollectionStatsWhereInput
}

input CollectionStatsUpdateDataInput {
  items: Int
  followers: Int
}

input CollectionStatsUpdateInput {
  items: Int
  followers: Int
}

input CollectionStatsUpdateOneInput {
  create: CollectionStatsCreateInput
  disconnect: Boolean
  delete: Boolean
  update: CollectionStatsUpdateDataInput
  upsert: CollectionStatsUpsertNestedInput
}

input CollectionStatsUpsertNestedInput {
  update: CollectionStatsUpdateDataInput!
  create: CollectionStatsCreateInput!
}

input CollectionStatsWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CollectionStatsWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CollectionStatsWhereInput!]
  items: Int
  """
  All values that are not equal to given value.
  """
  items_not: Int
  """
  All values that are contained in given list.
  """
  items_in: [Int!]
  """
  All values that are not contained in given list.
  """
  items_not_in: [Int!]
  """
  All values less than the given value.
  """
  items_lt: Int
  """
  All values less than or equal the given value.
  """
  items_lte: Int
  """
  All values greater than the given value.
  """
  items_gt: Int
  """
  All values greater than or equal the given value.
  """
  items_gte: Int
  followers: Int
  """
  All values that are not equal to given value.
  """
  followers_not: Int
  """
  All values that are contained in given list.
  """
  followers_in: [Int!]
  """
  All values that are not contained in given list.
  """
  followers_not_in: [Int!]
  """
  All values less than the given value.
  """
  followers_lt: Int
  """
  All values less than or equal the given value.
  """
  followers_lte: Int
  """
  All values greater than the given value.
  """
  followers_gt: Int
  """
  All values greater than or equal the given value.
  """
  followers_gte: Int
}

type CollectionSubscriptionPayload {
  mutation: MutationType!
  node: Collection
  updatedFields: [String!]
  previousValues: CollectionPreviousValues
}

input CollectionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CollectionSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CollectionSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CollectionWhereInput
}

input CollectionUpdateimagesInput {
  set: [String!]
}

input CollectionUpdateInput {
  title: String
  created_on: Int
  modified_on: Int
  images: CollectionUpdateimagesInput
  owners: UserUpdateManyWithoutCollectionsInput
  stats: CollectionStatsUpdateOneInput
  projects: ProjectUpdateManyInput
}

input CollectionUpdateManyWithoutOwnersInput {
  create: [CollectionCreateWithoutOwnersInput!]
  connect: [CollectionWhereUniqueInput!]
  disconnect: [CollectionWhereUniqueInput!]
  delete: [CollectionWhereUniqueInput!]
  update: [CollectionUpdateWithWhereUniqueWithoutOwnersInput!]
  upsert: [CollectionUpsertWithWhereUniqueWithoutOwnersInput!]
}

input CollectionUpdateWithoutOwnersDataInput {
  title: String
  created_on: Int
  modified_on: Int
  images: CollectionUpdateimagesInput
  stats: CollectionStatsUpdateOneInput
  projects: ProjectUpdateManyInput
}

input CollectionUpdateWithWhereUniqueWithoutOwnersInput {
  where: CollectionWhereUniqueInput!
  data: CollectionUpdateWithoutOwnersDataInput!
}

input CollectionUpsertWithWhereUniqueWithoutOwnersInput {
  where: CollectionWhereUniqueInput!
  update: CollectionUpdateWithoutOwnersDataInput!
  create: CollectionCreateWithoutOwnersInput!
}

input CollectionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CollectionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CollectionWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  created_on: Int
  """
  All values that are not equal to given value.
  """
  created_on_not: Int
  """
  All values that are contained in given list.
  """
  created_on_in: [Int!]
  """
  All values that are not contained in given list.
  """
  created_on_not_in: [Int!]
  """
  All values less than the given value.
  """
  created_on_lt: Int
  """
  All values less than or equal the given value.
  """
  created_on_lte: Int
  """
  All values greater than the given value.
  """
  created_on_gt: Int
  """
  All values greater than or equal the given value.
  """
  created_on_gte: Int
  modified_on: Int
  """
  All values that are not equal to given value.
  """
  modified_on_not: Int
  """
  All values that are contained in given list.
  """
  modified_on_in: [Int!]
  """
  All values that are not contained in given list.
  """
  modified_on_not_in: [Int!]
  """
  All values less than the given value.
  """
  modified_on_lt: Int
  """
  All values less than or equal the given value.
  """
  modified_on_lte: Int
  """
  All values greater than the given value.
  """
  modified_on_gt: Int
  """
  All values greater than or equal the given value.
  """
  modified_on_gte: Int
  owners_every: UserWhereInput
  owners_some: UserWhereInput
  owners_none: UserWhereInput
  stats: CollectionStatsWhereInput
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
}

input CollectionWhereUniqueInput {
  id: ID
}

type Comment {
  user(where: UserWhereInput): User!
  comment: String!
  created_on: Int!
}

"""
A connection to a list of items.
"""
type CommentConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  comment: String!
  created_on: Int!
  user: UserCreateOneInput!
}

input CommentCreateManyInput {
  create: [CommentCreateInput!]
}

"""
An edge in a connection.
"""
type CommentEdge {
  """
  The item at the end of the edge.
  """
  node: Comment!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CommentOrderByInput {
  comment_ASC
  comment_DESC
  created_on_ASC
  created_on_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommentPreviousValues {
  comment: String!
  created_on: Int!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CommentSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CommentSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  comment: String
  created_on: Int
  user: UserUpdateOneInput
}

input CommentUpdateManyInput {
  create: [CommentCreateInput!]
}

input CommentWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CommentWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CommentWhereInput!]
  comment: String
  """
  All values that are not equal to given value.
  """
  comment_not: String
  """
  All values that are contained in given list.
  """
  comment_in: [String!]
  """
  All values that are not contained in given list.
  """
  comment_not_in: [String!]
  """
  All values less than the given value.
  """
  comment_lt: String
  """
  All values less than or equal the given value.
  """
  comment_lte: String
  """
  All values greater than the given value.
  """
  comment_gt: String
  """
  All values greater than or equal the given value.
  """
  comment_gte: String
  """
  All values containing the given string.
  """
  comment_contains: String
  """
  All values not containing the given string.
  """
  comment_not_contains: String
  """
  All values starting with the given string.
  """
  comment_starts_with: String
  """
  All values not starting with the given string.
  """
  comment_not_starts_with: String
  """
  All values ending with the given string.
  """
  comment_ends_with: String
  """
  All values not ending with the given string.
  """
  comment_not_ends_with: String
  created_on: Int
  """
  All values that are not equal to given value.
  """
  created_on_not: Int
  """
  All values that are contained in given list.
  """
  created_on_in: [Int!]
  """
  All values that are not contained in given list.
  """
  created_on_not_in: [Int!]
  """
  All values less than the given value.
  """
  created_on_lt: Int
  """
  All values less than or equal the given value.
  """
  created_on_lte: Int
  """
  All values greater than the given value.
  """
  created_on_gt: Int
  """
  All values greater than or equal the given value.
  """
  created_on_gte: Int
  user: UserWhereInput
}

"""
A connection to a list of items.
"""
type FieldConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [FieldEdge]!
  aggregate: AggregateField!
}

input FieldCreateInput {
  name: String!
}

"""
An edge in a connection.
"""
type FieldEdge {
  """
  The item at the end of the edge.
  """
  node: Field!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FieldOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FieldPreviousValues {
  id: ID!
  name: String!
}

type FieldSubscriptionPayload {
  mutation: MutationType!
  node: Field
  updatedFields: [String!]
  previousValues: FieldPreviousValues
}

input FieldSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FieldSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FieldSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FieldWhereInput
}

input FieldUpdateInput {
  name: String
}

input FieldWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FieldWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FieldWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
}

input FieldWhereUniqueInput {
  id: ID
}

type Link {
  title: String!
  url: String!
}

"""
A connection to a list of items.
"""
type LinkConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [LinkEdge]!
  aggregate: AggregateLink!
}

input LinkCreateInput {
  title: String!
  url: String!
}

input LinkCreateManyInput {
  create: [LinkCreateInput!]
}

"""
An edge in a connection.
"""
type LinkEdge {
  """
  The item at the end of the edge.
  """
  node: Link!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum LinkOrderByInput {
  title_ASC
  title_DESC
  url_ASC
  url_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LinkPreviousValues {
  title: String!
  url: String!
}

type LinkSubscriptionPayload {
  mutation: MutationType!
  node: Link
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

input LinkSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [LinkSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [LinkSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LinkWhereInput
}

input LinkUpdateInput {
  title: String
  url: String
}

input LinkUpdateManyInput {
  create: [LinkCreateInput!]
}

input LinkWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [LinkWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [LinkWhereInput!]
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  url: String
  """
  All values that are not equal to given value.
  """
  url_not: String
  """
  All values that are contained in given list.
  """
  url_in: [String!]
  """
  All values that are not contained in given list.
  """
  url_not_in: [String!]
  """
  All values less than the given value.
  """
  url_lt: String
  """
  All values less than or equal the given value.
  """
  url_lte: String
  """
  All values greater than the given value.
  """
  url_gt: String
  """
  All values greater than or equal the given value.
  """
  url_gte: String
  """
  All values containing the given string.
  """
  url_contains: String
  """
  All values not containing the given string.
  """
  url_not_contains: String
  """
  All values starting with the given string.
  """
  url_starts_with: String
  """
  All values not starting with the given string.
  """
  url_not_starts_with: String
  """
  All values ending with the given string.
  """
  url_ends_with: String
  """
  All values not ending with the given string.
  """
  url_not_ends_with: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createProject(data: ProjectCreateInput!): Project!
  createWip(data: WipCreateInput!): Wip!
  createUser(data: UserCreateInput!): User!
  createCollection(data: CollectionCreateInput!): Collection!
  createRevision(data: RevisionCreateInput!): Revision!
  createAppreciation(data: AppreciationCreateInput!): Appreciation!
  createRevisionImageCollection(data: RevisionImageCollectionCreateInput!): RevisionImageCollection!
  createRevisionImage(data: RevisionImageCreateInput!): RevisionImage!
  createUserStatsByPeriod(data: UserStatsByPeriodCreateInput!): UserStatsByPeriod!
  createUserStats(data: UserStatsCreateInput!): UserStats!
  createLink(data: LinkCreateInput!): Link!
  createProjectsStats(data: ProjectsStatsCreateInput!): ProjectsStats!
  createCollectionStats(data: CollectionStatsCreateInput!): CollectionStats!
  createWipStats(data: WipStatsCreateInput!): WipStats!
  createComment(data: CommentCreateInput!): Comment!
  createWorkExperience(data: WorkExperienceCreateInput!): WorkExperience!
  createField(data: FieldCreateInput!): Field!
  createSU(data: SUCreateInput!): SU!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateWip(data: WipUpdateInput!, where: WipWhereUniqueInput!): Wip
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateCollection(data: CollectionUpdateInput!, where: CollectionWhereUniqueInput!): Collection
  updateRevision(data: RevisionUpdateInput!, where: RevisionWhereUniqueInput!): Revision
  updateField(data: FieldUpdateInput!, where: FieldWhereUniqueInput!): Field
  updateSU(data: SUUpdateInput!, where: SUWhereUniqueInput!): SU
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteWip(where: WipWhereUniqueInput!): Wip
  deleteUser(where: UserWhereUniqueInput!): User
  deleteCollection(where: CollectionWhereUniqueInput!): Collection
  deleteRevision(where: RevisionWhereUniqueInput!): Revision
  deleteField(where: FieldWhereUniqueInput!): Field
  deleteSU(where: SUWhereUniqueInput!): SU
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertWip(where: WipWhereUniqueInput!, create: WipCreateInput!, update: WipUpdateInput!): Wip!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertCollection(where: CollectionWhereUniqueInput!, create: CollectionCreateInput!, update: CollectionUpdateInput!): Collection!
  upsertRevision(where: RevisionWhereUniqueInput!, create: RevisionCreateInput!, update: RevisionUpdateInput!): Revision!
  upsertField(where: FieldWhereUniqueInput!, create: FieldCreateInput!, update: FieldUpdateInput!): Field!
  upsertSU(where: SUWhereUniqueInput!, create: SUCreateInput!, update: SUUpdateInput!): SU!
  updateManyProjects(data: ProjectUpdateInput!, where: ProjectWhereInput!): BatchPayload!
  updateManyWips(data: WipUpdateInput!, where: WipWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyCollections(data: CollectionUpdateInput!, where: CollectionWhereInput!): BatchPayload!
  updateManyRevisions(data: RevisionUpdateInput!, where: RevisionWhereInput!): BatchPayload!
  updateManyAppreciations(data: AppreciationUpdateInput!, where: AppreciationWhereInput!): BatchPayload!
  updateManyRevisionImageCollections(data: RevisionImageCollectionUpdateInput!, where: RevisionImageCollectionWhereInput!): BatchPayload!
  updateManyRevisionImages(data: RevisionImageUpdateInput!, where: RevisionImageWhereInput!): BatchPayload!
  updateManyUserStatsByPeriods(data: UserStatsByPeriodUpdateInput!, where: UserStatsByPeriodWhereInput!): BatchPayload!
  updateManyUserStatses(data: UserStatsUpdateInput!, where: UserStatsWhereInput!): BatchPayload!
  updateManyLinks(data: LinkUpdateInput!, where: LinkWhereInput!): BatchPayload!
  updateManyProjectsStatses(data: ProjectsStatsUpdateInput!, where: ProjectsStatsWhereInput!): BatchPayload!
  updateManyCollectionStatses(data: CollectionStatsUpdateInput!, where: CollectionStatsWhereInput!): BatchPayload!
  updateManyWipStatses(data: WipStatsUpdateInput!, where: WipStatsWhereInput!): BatchPayload!
  updateManyComments(data: CommentUpdateInput!, where: CommentWhereInput!): BatchPayload!
  updateManyWorkExperiences(data: WorkExperienceUpdateInput!, where: WorkExperienceWhereInput!): BatchPayload!
  updateManyFields(data: FieldUpdateInput!, where: FieldWhereInput!): BatchPayload!
  updateManySUs(data: SUUpdateInput!, where: SUWhereInput!): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput!): BatchPayload!
  deleteManyWips(where: WipWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyCollections(where: CollectionWhereInput!): BatchPayload!
  deleteManyRevisions(where: RevisionWhereInput!): BatchPayload!
  deleteManyAppreciations(where: AppreciationWhereInput!): BatchPayload!
  deleteManyRevisionImageCollections(where: RevisionImageCollectionWhereInput!): BatchPayload!
  deleteManyRevisionImages(where: RevisionImageWhereInput!): BatchPayload!
  deleteManyUserStatsByPeriods(where: UserStatsByPeriodWhereInput!): BatchPayload!
  deleteManyUserStatses(where: UserStatsWhereInput!): BatchPayload!
  deleteManyLinks(where: LinkWhereInput!): BatchPayload!
  deleteManyProjectsStatses(where: ProjectsStatsWhereInput!): BatchPayload!
  deleteManyCollectionStatses(where: CollectionStatsWhereInput!): BatchPayload!
  deleteManyWipStatses(where: WipStatsWhereInput!): BatchPayload!
  deleteManyComments(where: CommentWhereInput!): BatchPayload!
  deleteManyWorkExperiences(where: WorkExperienceWhereInput!): BatchPayload!
  deleteManyFields(where: FieldWhereInput!): BatchPayload!
  deleteManySUs(where: SUWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type ProjectConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreatefieldsInput {
  set: [String!]
}

input ProjectCreateInput {
  name: String!
  published_on: Int!
  created_on: Int!
  modified_on: Int!
  url: String!
  mature_content: Int!
  fields: ProjectCreatefieldsInput
  owners: UserCreateManyWithoutProjectsInput
  stats: ProjectsStatsCreateOneInput!
  comments: CommentCreateManyInput
}

input ProjectCreateManyInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateManyWithoutOwnersInput {
  create: [ProjectCreateWithoutOwnersInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateOneInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutOwnersInput {
  name: String!
  published_on: Int!
  created_on: Int!
  modified_on: Int!
  url: String!
  mature_content: Int!
  fields: ProjectCreatefieldsInput
  stats: ProjectsStatsCreateOneInput!
  comments: CommentCreateManyInput
}

"""
An edge in a connection.
"""
type ProjectEdge {
  """
  The item at the end of the edge.
  """
  node: Project!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  published_on_ASC
  published_on_DESC
  created_on_ASC
  created_on_DESC
  modified_on_ASC
  modified_on_DESC
  url_ASC
  url_DESC
  mature_content_ASC
  mature_content_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  name: String!
  published_on: Int!
  created_on: Int!
  modified_on: Int!
  url: String!
  fields: [String!]
  mature_content: Int!
}

type ProjectsStats {
  views: Int!
  appreciations: Int!
  comments: Int!
}

"""
A connection to a list of items.
"""
type ProjectsStatsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ProjectsStatsEdge]!
  aggregate: AggregateProjectsStats!
}

input ProjectsStatsCreateInput {
  views: Int!
  appreciations: Int!
  comments: Int!
}

input ProjectsStatsCreateOneInput {
  create: ProjectsStatsCreateInput
}

"""
An edge in a connection.
"""
type ProjectsStatsEdge {
  """
  The item at the end of the edge.
  """
  node: ProjectsStats!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ProjectsStatsOrderByInput {
  views_ASC
  views_DESC
  appreciations_ASC
  appreciations_DESC
  comments_ASC
  comments_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProjectsStatsPreviousValues {
  views: Int!
  appreciations: Int!
  comments: Int!
}

type ProjectsStatsSubscriptionPayload {
  mutation: MutationType!
  node: ProjectsStats
  updatedFields: [String!]
  previousValues: ProjectsStatsPreviousValues
}

input ProjectsStatsSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProjectsStatsSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ProjectsStatsSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectsStatsWhereInput
}

input ProjectsStatsUpdateDataInput {
  views: Int
  appreciations: Int
  comments: Int
}

input ProjectsStatsUpdateInput {
  views: Int
  appreciations: Int
  comments: Int
}

input ProjectsStatsUpdateOneInput {
  create: ProjectsStatsCreateInput
  disconnect: Boolean
  delete: Boolean
  update: ProjectsStatsUpdateDataInput
  upsert: ProjectsStatsUpsertNestedInput
}

input ProjectsStatsUpsertNestedInput {
  update: ProjectsStatsUpdateDataInput!
  create: ProjectsStatsCreateInput!
}

input ProjectsStatsWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProjectsStatsWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ProjectsStatsWhereInput!]
  views: Int
  """
  All values that are not equal to given value.
  """
  views_not: Int
  """
  All values that are contained in given list.
  """
  views_in: [Int!]
  """
  All values that are not contained in given list.
  """
  views_not_in: [Int!]
  """
  All values less than the given value.
  """
  views_lt: Int
  """
  All values less than or equal the given value.
  """
  views_lte: Int
  """
  All values greater than the given value.
  """
  views_gt: Int
  """
  All values greater than or equal the given value.
  """
  views_gte: Int
  appreciations: Int
  """
  All values that are not equal to given value.
  """
  appreciations_not: Int
  """
  All values that are contained in given list.
  """
  appreciations_in: [Int!]
  """
  All values that are not contained in given list.
  """
  appreciations_not_in: [Int!]
  """
  All values less than the given value.
  """
  appreciations_lt: Int
  """
  All values less than or equal the given value.
  """
  appreciations_lte: Int
  """
  All values greater than the given value.
  """
  appreciations_gt: Int
  """
  All values greater than or equal the given value.
  """
  appreciations_gte: Int
  comments: Int
  """
  All values that are not equal to given value.
  """
  comments_not: Int
  """
  All values that are contained in given list.
  """
  comments_in: [Int!]
  """
  All values that are not contained in given list.
  """
  comments_not_in: [Int!]
  """
  All values less than the given value.
  """
  comments_lt: Int
  """
  All values less than or equal the given value.
  """
  comments_lte: Int
  """
  All values greater than the given value.
  """
  comments_gt: Int
  """
  All values greater than or equal the given value.
  """
  comments_gte: Int
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProjectSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ProjectSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateDataInput {
  name: String
  published_on: Int
  created_on: Int
  modified_on: Int
  url: String
  mature_content: Int
  fields: ProjectUpdatefieldsInput
  owners: UserUpdateManyWithoutProjectsInput
  stats: ProjectsStatsUpdateOneInput
  comments: CommentUpdateManyInput
}

input ProjectUpdatefieldsInput {
  set: [String!]
}

input ProjectUpdateInput {
  name: String
  published_on: Int
  created_on: Int
  modified_on: Int
  url: String
  mature_content: Int
  fields: ProjectUpdatefieldsInput
  owners: UserUpdateManyWithoutProjectsInput
  stats: ProjectsStatsUpdateOneInput
  comments: CommentUpdateManyInput
}

input ProjectUpdateManyInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueNestedInput!]
  upsert: [ProjectUpsertWithWhereUniqueNestedInput!]
}

input ProjectUpdateManyWithoutOwnersInput {
  create: [ProjectCreateWithoutOwnersInput!]
  connect: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutOwnersInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutOwnersInput!]
}

input ProjectUpdateOneInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProjectUpdateDataInput
  upsert: ProjectUpsertNestedInput
}

input ProjectUpdateWithoutOwnersDataInput {
  name: String
  published_on: Int
  created_on: Int
  modified_on: Int
  url: String
  mature_content: Int
  fields: ProjectUpdatefieldsInput
  stats: ProjectsStatsUpdateOneInput
  comments: CommentUpdateManyInput
}

input ProjectUpdateWithWhereUniqueNestedInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateDataInput!
}

input ProjectUpdateWithWhereUniqueWithoutOwnersInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutOwnersDataInput!
}

input ProjectUpsertNestedInput {
  update: ProjectUpdateDataInput!
  create: ProjectCreateInput!
}

input ProjectUpsertWithWhereUniqueNestedInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateDataInput!
  create: ProjectCreateInput!
}

input ProjectUpsertWithWhereUniqueWithoutOwnersInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutOwnersDataInput!
  create: ProjectCreateWithoutOwnersInput!
}

input ProjectWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProjectWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ProjectWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  published_on: Int
  """
  All values that are not equal to given value.
  """
  published_on_not: Int
  """
  All values that are contained in given list.
  """
  published_on_in: [Int!]
  """
  All values that are not contained in given list.
  """
  published_on_not_in: [Int!]
  """
  All values less than the given value.
  """
  published_on_lt: Int
  """
  All values less than or equal the given value.
  """
  published_on_lte: Int
  """
  All values greater than the given value.
  """
  published_on_gt: Int
  """
  All values greater than or equal the given value.
  """
  published_on_gte: Int
  created_on: Int
  """
  All values that are not equal to given value.
  """
  created_on_not: Int
  """
  All values that are contained in given list.
  """
  created_on_in: [Int!]
  """
  All values that are not contained in given list.
  """
  created_on_not_in: [Int!]
  """
  All values less than the given value.
  """
  created_on_lt: Int
  """
  All values less than or equal the given value.
  """
  created_on_lte: Int
  """
  All values greater than the given value.
  """
  created_on_gt: Int
  """
  All values greater than or equal the given value.
  """
  created_on_gte: Int
  modified_on: Int
  """
  All values that are not equal to given value.
  """
  modified_on_not: Int
  """
  All values that are contained in given list.
  """
  modified_on_in: [Int!]
  """
  All values that are not contained in given list.
  """
  modified_on_not_in: [Int!]
  """
  All values less than the given value.
  """
  modified_on_lt: Int
  """
  All values less than or equal the given value.
  """
  modified_on_lte: Int
  """
  All values greater than the given value.
  """
  modified_on_gt: Int
  """
  All values greater than or equal the given value.
  """
  modified_on_gte: Int
  url: String
  """
  All values that are not equal to given value.
  """
  url_not: String
  """
  All values that are contained in given list.
  """
  url_in: [String!]
  """
  All values that are not contained in given list.
  """
  url_not_in: [String!]
  """
  All values less than the given value.
  """
  url_lt: String
  """
  All values less than or equal the given value.
  """
  url_lte: String
  """
  All values greater than the given value.
  """
  url_gt: String
  """
  All values greater than or equal the given value.
  """
  url_gte: String
  """
  All values containing the given string.
  """
  url_contains: String
  """
  All values not containing the given string.
  """
  url_not_contains: String
  """
  All values starting with the given string.
  """
  url_starts_with: String
  """
  All values not starting with the given string.
  """
  url_not_starts_with: String
  """
  All values ending with the given string.
  """
  url_ends_with: String
  """
  All values not ending with the given string.
  """
  url_not_ends_with: String
  mature_content: Int
  """
  All values that are not equal to given value.
  """
  mature_content_not: Int
  """
  All values that are contained in given list.
  """
  mature_content_in: [Int!]
  """
  All values that are not contained in given list.
  """
  mature_content_not_in: [Int!]
  """
  All values less than the given value.
  """
  mature_content_lt: Int
  """
  All values less than or equal the given value.
  """
  mature_content_lte: Int
  """
  All values greater than the given value.
  """
  mature_content_gt: Int
  """
  All values greater than or equal the given value.
  """
  mature_content_gte: Int
  owners_every: UserWhereInput
  owners_some: UserWhereInput
  owners_none: UserWhereInput
  stats: ProjectsStatsWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  wips(where: WipWhereInput, orderBy: WipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Wip]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  collections(where: CollectionWhereInput, orderBy: CollectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Collection]!
  revisions(where: RevisionWhereInput, orderBy: RevisionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Revision]!
  appreciations(where: AppreciationWhereInput, orderBy: AppreciationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Appreciation]!
  revisionImageCollections(where: RevisionImageCollectionWhereInput, orderBy: RevisionImageCollectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RevisionImageCollection]!
  revisionImages(where: RevisionImageWhereInput, orderBy: RevisionImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RevisionImage]!
  userStatsByPeriods(where: UserStatsByPeriodWhereInput, orderBy: UserStatsByPeriodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserStatsByPeriod]!
  userStatses(where: UserStatsWhereInput, orderBy: UserStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserStats]!
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link]!
  projectsStatses(where: ProjectsStatsWhereInput, orderBy: ProjectsStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectsStats]!
  collectionStatses(where: CollectionStatsWhereInput, orderBy: CollectionStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CollectionStats]!
  wipStatses(where: WipStatsWhereInput, orderBy: WipStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WipStats]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  workExperiences(where: WorkExperienceWhereInput, orderBy: WorkExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkExperience]!
  fields(where: FieldWhereInput, orderBy: FieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Field]!
  sUs(where: SUWhereInput, orderBy: SUOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SU]!
  project(where: ProjectWhereUniqueInput!): Project
  wip(where: WipWhereUniqueInput!): Wip
  user(where: UserWhereUniqueInput!): User
  collection(where: CollectionWhereUniqueInput!): Collection
  revision(where: RevisionWhereUniqueInput!): Revision
  field(where: FieldWhereUniqueInput!): Field
  sU(where: SUWhereUniqueInput!): SU
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  wipsConnection(where: WipWhereInput, orderBy: WipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WipConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  collectionsConnection(where: CollectionWhereInput, orderBy: CollectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CollectionConnection!
  revisionsConnection(where: RevisionWhereInput, orderBy: RevisionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RevisionConnection!
  appreciationsConnection(where: AppreciationWhereInput, orderBy: AppreciationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AppreciationConnection!
  revisionImageCollectionsConnection(where: RevisionImageCollectionWhereInput, orderBy: RevisionImageCollectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RevisionImageCollectionConnection!
  revisionImagesConnection(where: RevisionImageWhereInput, orderBy: RevisionImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RevisionImageConnection!
  userStatsByPeriodsConnection(where: UserStatsByPeriodWhereInput, orderBy: UserStatsByPeriodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserStatsByPeriodConnection!
  userStatsesConnection(where: UserStatsWhereInput, orderBy: UserStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserStatsConnection!
  linksConnection(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection!
  projectsStatsesConnection(where: ProjectsStatsWhereInput, orderBy: ProjectsStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectsStatsConnection!
  collectionStatsesConnection(where: CollectionStatsWhereInput, orderBy: CollectionStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CollectionStatsConnection!
  wipStatsesConnection(where: WipStatsWhereInput, orderBy: WipStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WipStatsConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  workExperiencesConnection(where: WorkExperienceWhereInput, orderBy: WorkExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkExperienceConnection!
  fieldsConnection(where: FieldWhereInput, orderBy: FieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FieldConnection!
  sUsConnection(where: SUWhereInput, orderBy: SUOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SUConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

"""
A connection to a list of items.
"""
type RevisionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [RevisionEdge]!
  aggregate: AggregateRevision!
}

input RevisionCreateInput {
  created_on: Int!
  description: String!
  number: Int!
  short_url: String!
  url: String!
  wip_id: ID!
  tags: RevisionCreatetagsInput
  images: RevisionImageCreateManyInput
}

input RevisionCreateManyInput {
  create: [RevisionCreateInput!]
  connect: [RevisionWhereUniqueInput!]
}

input RevisionCreatetagsInput {
  set: [String!]
}

"""
An edge in a connection.
"""
type RevisionEdge {
  """
  The item at the end of the edge.
  """
  node: Revision!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type RevisionImage {
  url: String!
  height: Int!
  width: Int!
}

type RevisionImageCollection {
  description: String
  high_definition(where: RevisionImageWhereInput): RevisionImage!
}

"""
A connection to a list of items.
"""
type RevisionImageCollectionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [RevisionImageCollectionEdge]!
  aggregate: AggregateRevisionImageCollection!
}

input RevisionImageCollectionCreateInput {
  description: String
  high_definition: RevisionImageCreateOneInput!
}

"""
An edge in a connection.
"""
type RevisionImageCollectionEdge {
  """
  The item at the end of the edge.
  """
  node: RevisionImageCollection!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum RevisionImageCollectionOrderByInput {
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RevisionImageCollectionPreviousValues {
  description: String
}

type RevisionImageCollectionSubscriptionPayload {
  mutation: MutationType!
  node: RevisionImageCollection
  updatedFields: [String!]
  previousValues: RevisionImageCollectionPreviousValues
}

input RevisionImageCollectionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RevisionImageCollectionSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [RevisionImageCollectionSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RevisionImageCollectionWhereInput
}

input RevisionImageCollectionUpdateInput {
  description: String
  high_definition: RevisionImageUpdateOneInput
}

input RevisionImageCollectionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RevisionImageCollectionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [RevisionImageCollectionWhereInput!]
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  high_definition: RevisionImageWhereInput
}

"""
A connection to a list of items.
"""
type RevisionImageConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [RevisionImageEdge]!
  aggregate: AggregateRevisionImage!
}

input RevisionImageCreateInput {
  url: String!
  height: Int!
  width: Int!
}

input RevisionImageCreateManyInput {
  create: [RevisionImageCreateInput!]
}

input RevisionImageCreateOneInput {
  create: RevisionImageCreateInput
}

"""
An edge in a connection.
"""
type RevisionImageEdge {
  """
  The item at the end of the edge.
  """
  node: RevisionImage!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum RevisionImageOrderByInput {
  url_ASC
  url_DESC
  height_ASC
  height_DESC
  width_ASC
  width_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RevisionImagePreviousValues {
  url: String!
  height: Int!
  width: Int!
}

type RevisionImageSubscriptionPayload {
  mutation: MutationType!
  node: RevisionImage
  updatedFields: [String!]
  previousValues: RevisionImagePreviousValues
}

input RevisionImageSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RevisionImageSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [RevisionImageSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RevisionImageWhereInput
}

input RevisionImageUpdateDataInput {
  url: String
  height: Int
  width: Int
}

input RevisionImageUpdateInput {
  url: String
  height: Int
  width: Int
}

input RevisionImageUpdateManyInput {
  create: [RevisionImageCreateInput!]
}

input RevisionImageUpdateOneInput {
  create: RevisionImageCreateInput
  disconnect: Boolean
  delete: Boolean
  update: RevisionImageUpdateDataInput
  upsert: RevisionImageUpsertNestedInput
}

input RevisionImageUpsertNestedInput {
  update: RevisionImageUpdateDataInput!
  create: RevisionImageCreateInput!
}

input RevisionImageWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RevisionImageWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [RevisionImageWhereInput!]
  url: String
  """
  All values that are not equal to given value.
  """
  url_not: String
  """
  All values that are contained in given list.
  """
  url_in: [String!]
  """
  All values that are not contained in given list.
  """
  url_not_in: [String!]
  """
  All values less than the given value.
  """
  url_lt: String
  """
  All values less than or equal the given value.
  """
  url_lte: String
  """
  All values greater than the given value.
  """
  url_gt: String
  """
  All values greater than or equal the given value.
  """
  url_gte: String
  """
  All values containing the given string.
  """
  url_contains: String
  """
  All values not containing the given string.
  """
  url_not_contains: String
  """
  All values starting with the given string.
  """
  url_starts_with: String
  """
  All values not starting with the given string.
  """
  url_not_starts_with: String
  """
  All values ending with the given string.
  """
  url_ends_with: String
  """
  All values not ending with the given string.
  """
  url_not_ends_with: String
  height: Int
  """
  All values that are not equal to given value.
  """
  height_not: Int
  """
  All values that are contained in given list.
  """
  height_in: [Int!]
  """
  All values that are not contained in given list.
  """
  height_not_in: [Int!]
  """
  All values less than the given value.
  """
  height_lt: Int
  """
  All values less than or equal the given value.
  """
  height_lte: Int
  """
  All values greater than the given value.
  """
  height_gt: Int
  """
  All values greater than or equal the given value.
  """
  height_gte: Int
  width: Int
  """
  All values that are not equal to given value.
  """
  width_not: Int
  """
  All values that are contained in given list.
  """
  width_in: [Int!]
  """
  All values that are not contained in given list.
  """
  width_not_in: [Int!]
  """
  All values less than the given value.
  """
  width_lt: Int
  """
  All values less than or equal the given value.
  """
  width_lte: Int
  """
  All values greater than the given value.
  """
  width_gt: Int
  """
  All values greater than or equal the given value.
  """
  width_gte: Int
}

enum RevisionOrderByInput {
  id_ASC
  id_DESC
  created_on_ASC
  created_on_DESC
  description_ASC
  description_DESC
  number_ASC
  number_DESC
  short_url_ASC
  short_url_DESC
  url_ASC
  url_DESC
  wip_id_ASC
  wip_id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RevisionPreviousValues {
  id: ID!
  created_on: Int!
  description: String!
  number: Int!
  short_url: String!
  tags: [String!]
  url: String!
  wip_id: ID!
}

type RevisionSubscriptionPayload {
  mutation: MutationType!
  node: Revision
  updatedFields: [String!]
  previousValues: RevisionPreviousValues
}

input RevisionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RevisionSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [RevisionSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RevisionWhereInput
}

input RevisionUpdateDataInput {
  created_on: Int
  description: String
  number: Int
  short_url: String
  url: String
  wip_id: ID
  tags: RevisionUpdatetagsInput
  images: RevisionImageUpdateManyInput
}

input RevisionUpdateInput {
  created_on: Int
  description: String
  number: Int
  short_url: String
  url: String
  wip_id: ID
  tags: RevisionUpdatetagsInput
  images: RevisionImageUpdateManyInput
}

input RevisionUpdateManyInput {
  create: [RevisionCreateInput!]
  connect: [RevisionWhereUniqueInput!]
  disconnect: [RevisionWhereUniqueInput!]
  delete: [RevisionWhereUniqueInput!]
  update: [RevisionUpdateWithWhereUniqueNestedInput!]
  upsert: [RevisionUpsertWithWhereUniqueNestedInput!]
}

input RevisionUpdatetagsInput {
  set: [String!]
}

input RevisionUpdateWithWhereUniqueNestedInput {
  where: RevisionWhereUniqueInput!
  data: RevisionUpdateDataInput!
}

input RevisionUpsertWithWhereUniqueNestedInput {
  where: RevisionWhereUniqueInput!
  update: RevisionUpdateDataInput!
  create: RevisionCreateInput!
}

input RevisionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RevisionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [RevisionWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  created_on: Int
  """
  All values that are not equal to given value.
  """
  created_on_not: Int
  """
  All values that are contained in given list.
  """
  created_on_in: [Int!]
  """
  All values that are not contained in given list.
  """
  created_on_not_in: [Int!]
  """
  All values less than the given value.
  """
  created_on_lt: Int
  """
  All values less than or equal the given value.
  """
  created_on_lte: Int
  """
  All values greater than the given value.
  """
  created_on_gt: Int
  """
  All values greater than or equal the given value.
  """
  created_on_gte: Int
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  number: Int
  """
  All values that are not equal to given value.
  """
  number_not: Int
  """
  All values that are contained in given list.
  """
  number_in: [Int!]
  """
  All values that are not contained in given list.
  """
  number_not_in: [Int!]
  """
  All values less than the given value.
  """
  number_lt: Int
  """
  All values less than or equal the given value.
  """
  number_lte: Int
  """
  All values greater than the given value.
  """
  number_gt: Int
  """
  All values greater than or equal the given value.
  """
  number_gte: Int
  short_url: String
  """
  All values that are not equal to given value.
  """
  short_url_not: String
  """
  All values that are contained in given list.
  """
  short_url_in: [String!]
  """
  All values that are not contained in given list.
  """
  short_url_not_in: [String!]
  """
  All values less than the given value.
  """
  short_url_lt: String
  """
  All values less than or equal the given value.
  """
  short_url_lte: String
  """
  All values greater than the given value.
  """
  short_url_gt: String
  """
  All values greater than or equal the given value.
  """
  short_url_gte: String
  """
  All values containing the given string.
  """
  short_url_contains: String
  """
  All values not containing the given string.
  """
  short_url_not_contains: String
  """
  All values starting with the given string.
  """
  short_url_starts_with: String
  """
  All values not starting with the given string.
  """
  short_url_not_starts_with: String
  """
  All values ending with the given string.
  """
  short_url_ends_with: String
  """
  All values not ending with the given string.
  """
  short_url_not_ends_with: String
  url: String
  """
  All values that are not equal to given value.
  """
  url_not: String
  """
  All values that are contained in given list.
  """
  url_in: [String!]
  """
  All values that are not contained in given list.
  """
  url_not_in: [String!]
  """
  All values less than the given value.
  """
  url_lt: String
  """
  All values less than or equal the given value.
  """
  url_lte: String
  """
  All values greater than the given value.
  """
  url_gt: String
  """
  All values greater than or equal the given value.
  """
  url_gte: String
  """
  All values containing the given string.
  """
  url_contains: String
  """
  All values not containing the given string.
  """
  url_not_contains: String
  """
  All values starting with the given string.
  """
  url_starts_with: String
  """
  All values not starting with the given string.
  """
  url_not_starts_with: String
  """
  All values ending with the given string.
  """
  url_ends_with: String
  """
  All values not ending with the given string.
  """
  url_not_ends_with: String
  wip_id: ID
  """
  All values that are not equal to given value.
  """
  wip_id_not: ID
  """
  All values that are contained in given list.
  """
  wip_id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  wip_id_not_in: [ID!]
  """
  All values less than the given value.
  """
  wip_id_lt: ID
  """
  All values less than or equal the given value.
  """
  wip_id_lte: ID
  """
  All values greater than the given value.
  """
  wip_id_gt: ID
  """
  All values greater than or equal the given value.
  """
  wip_id_gte: ID
  """
  All values containing the given string.
  """
  wip_id_contains: ID
  """
  All values not containing the given string.
  """
  wip_id_not_contains: ID
  """
  All values starting with the given string.
  """
  wip_id_starts_with: ID
  """
  All values not starting with the given string.
  """
  wip_id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  wip_id_ends_with: ID
  """
  All values not ending with the given string.
  """
  wip_id_not_ends_with: ID
  images_every: RevisionImageWhereInput
  images_some: RevisionImageWhereInput
  images_none: RevisionImageWhereInput
}

input RevisionWhereUniqueInput {
  id: ID
}

type Subscription {
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  wip(where: WipSubscriptionWhereInput): WipSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  collection(where: CollectionSubscriptionWhereInput): CollectionSubscriptionPayload
  revision(where: RevisionSubscriptionWhereInput): RevisionSubscriptionPayload
  appreciation(where: AppreciationSubscriptionWhereInput): AppreciationSubscriptionPayload
  revisionImageCollection(where: RevisionImageCollectionSubscriptionWhereInput): RevisionImageCollectionSubscriptionPayload
  revisionImage(where: RevisionImageSubscriptionWhereInput): RevisionImageSubscriptionPayload
  userStatsByPeriod(where: UserStatsByPeriodSubscriptionWhereInput): UserStatsByPeriodSubscriptionPayload
  userStats(where: UserStatsSubscriptionWhereInput): UserStatsSubscriptionPayload
  link(where: LinkSubscriptionWhereInput): LinkSubscriptionPayload
  projectsStats(where: ProjectsStatsSubscriptionWhereInput): ProjectsStatsSubscriptionPayload
  collectionStats(where: CollectionStatsSubscriptionWhereInput): CollectionStatsSubscriptionPayload
  wipStats(where: WipStatsSubscriptionWhereInput): WipStatsSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  workExperience(where: WorkExperienceSubscriptionWhereInput): WorkExperienceSubscriptionPayload
  field(where: FieldSubscriptionWhereInput): FieldSubscriptionPayload
  sU(where: SUSubscriptionWhereInput): SUSubscriptionPayload
}

"""
A connection to a list of items.
"""
type SUConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [SUEdge]!
  aggregate: AggregateSU!
}

input SUCreateInput {
  name: String!
  email: String!
  password: String!
}

"""
An edge in a connection.
"""
type SUEdge {
  """
  The item at the end of the edge.
  """
  node: SU!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum SUOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SUPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type SUSubscriptionPayload {
  mutation: MutationType!
  node: SU
  updatedFields: [String!]
  previousValues: SUPreviousValues
}

input SUSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SUSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [SUSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SUWhereInput
}

input SUUpdateInput {
  name: String
  email: String
  password: String
}

input SUWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SUWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [SUWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
}

input SUWhereUniqueInput {
  id: ID
  email: String
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreatefieldsInput {
  set: [String!]
}

input UserCreateInput {
  first_name: String!
  last_name: String!
  username: String!
  city: String
  state: String
  country: String
  company: String
  occupation: String
  created_on: Int!
  url: String!
  display_name: String!
  twitter: String
  fields: UserCreatefieldsInput
  links: LinkCreateManyInput
  projects: ProjectCreateManyWithoutOwnersInput
  wips: WipCreateManyWithoutOwnerInput
  appreciations: AppreciationCreateManyInput
  collections: CollectionCreateManyWithoutOwnersInput
  stats: UserStatsByPeriodCreateOneInput!
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  workExperience: WorkExperienceCreateManyInput
}

input UserCreateManyWithoutCollectionsInput {
  create: [UserCreateWithoutCollectionsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutProjectsInput {
  create: [UserCreateWithoutProjectsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutWipsInput {
  create: UserCreateWithoutWipsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCollectionsInput {
  first_name: String!
  last_name: String!
  username: String!
  city: String
  state: String
  country: String
  company: String
  occupation: String
  created_on: Int!
  url: String!
  display_name: String!
  twitter: String
  fields: UserCreatefieldsInput
  links: LinkCreateManyInput
  projects: ProjectCreateManyWithoutOwnersInput
  wips: WipCreateManyWithoutOwnerInput
  appreciations: AppreciationCreateManyInput
  stats: UserStatsByPeriodCreateOneInput!
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  workExperience: WorkExperienceCreateManyInput
}

input UserCreateWithoutFollowersInput {
  first_name: String!
  last_name: String!
  username: String!
  city: String
  state: String
  country: String
  company: String
  occupation: String
  created_on: Int!
  url: String!
  display_name: String!
  twitter: String
  fields: UserCreatefieldsInput
  links: LinkCreateManyInput
  projects: ProjectCreateManyWithoutOwnersInput
  wips: WipCreateManyWithoutOwnerInput
  appreciations: AppreciationCreateManyInput
  collections: CollectionCreateManyWithoutOwnersInput
  stats: UserStatsByPeriodCreateOneInput!
  following: UserCreateManyWithoutFollowingInput
  workExperience: WorkExperienceCreateManyInput
}

input UserCreateWithoutFollowingInput {
  first_name: String!
  last_name: String!
  username: String!
  city: String
  state: String
  country: String
  company: String
  occupation: String
  created_on: Int!
  url: String!
  display_name: String!
  twitter: String
  fields: UserCreatefieldsInput
  links: LinkCreateManyInput
  projects: ProjectCreateManyWithoutOwnersInput
  wips: WipCreateManyWithoutOwnerInput
  appreciations: AppreciationCreateManyInput
  collections: CollectionCreateManyWithoutOwnersInput
  stats: UserStatsByPeriodCreateOneInput!
  followers: UserCreateManyWithoutFollowersInput
  workExperience: WorkExperienceCreateManyInput
}

input UserCreateWithoutProjectsInput {
  first_name: String!
  last_name: String!
  username: String!
  city: String
  state: String
  country: String
  company: String
  occupation: String
  created_on: Int!
  url: String!
  display_name: String!
  twitter: String
  fields: UserCreatefieldsInput
  links: LinkCreateManyInput
  wips: WipCreateManyWithoutOwnerInput
  appreciations: AppreciationCreateManyInput
  collections: CollectionCreateManyWithoutOwnersInput
  stats: UserStatsByPeriodCreateOneInput!
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  workExperience: WorkExperienceCreateManyInput
}

input UserCreateWithoutWipsInput {
  first_name: String!
  last_name: String!
  username: String!
  city: String
  state: String
  country: String
  company: String
  occupation: String
  created_on: Int!
  url: String!
  display_name: String!
  twitter: String
  fields: UserCreatefieldsInput
  links: LinkCreateManyInput
  projects: ProjectCreateManyWithoutOwnersInput
  appreciations: AppreciationCreateManyInput
  collections: CollectionCreateManyWithoutOwnersInput
  stats: UserStatsByPeriodCreateOneInput!
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  workExperience: WorkExperienceCreateManyInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  username_ASC
  username_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  country_ASC
  country_DESC
  company_ASC
  company_DESC
  occupation_ASC
  occupation_DESC
  created_on_ASC
  created_on_DESC
  url_ASC
  url_DESC
  display_name_ASC
  display_name_DESC
  twitter_ASC
  twitter_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  first_name: String!
  last_name: String!
  username: String!
  city: String
  state: String
  country: String
  company: String
  occupation: String
  created_on: Int!
  url: String!
  display_name: String!
  fields: [String!]
  twitter: String
}

type UserStats {
  project_views: Int!
  project_appreciations: Int!
  project_comments: Int!
  profile_views: Int!
}

type UserStatsByPeriod {
  all_time(where: UserStatsWhereInput): UserStats!
  description: String
}

"""
A connection to a list of items.
"""
type UserStatsByPeriodConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserStatsByPeriodEdge]!
  aggregate: AggregateUserStatsByPeriod!
}

input UserStatsByPeriodCreateInput {
  description: String
  all_time: UserStatsCreateOneInput!
}

input UserStatsByPeriodCreateOneInput {
  create: UserStatsByPeriodCreateInput
}

"""
An edge in a connection.
"""
type UserStatsByPeriodEdge {
  """
  The item at the end of the edge.
  """
  node: UserStatsByPeriod!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserStatsByPeriodOrderByInput {
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserStatsByPeriodPreviousValues {
  description: String
}

type UserStatsByPeriodSubscriptionPayload {
  mutation: MutationType!
  node: UserStatsByPeriod
  updatedFields: [String!]
  previousValues: UserStatsByPeriodPreviousValues
}

input UserStatsByPeriodSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserStatsByPeriodSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserStatsByPeriodSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserStatsByPeriodWhereInput
}

input UserStatsByPeriodUpdateDataInput {
  description: String
  all_time: UserStatsUpdateOneInput
}

input UserStatsByPeriodUpdateInput {
  description: String
  all_time: UserStatsUpdateOneInput
}

input UserStatsByPeriodUpdateOneInput {
  create: UserStatsByPeriodCreateInput
  disconnect: Boolean
  delete: Boolean
  update: UserStatsByPeriodUpdateDataInput
  upsert: UserStatsByPeriodUpsertNestedInput
}

input UserStatsByPeriodUpsertNestedInput {
  update: UserStatsByPeriodUpdateDataInput!
  create: UserStatsByPeriodCreateInput!
}

input UserStatsByPeriodWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserStatsByPeriodWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserStatsByPeriodWhereInput!]
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  all_time: UserStatsWhereInput
}

"""
A connection to a list of items.
"""
type UserStatsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserStatsEdge]!
  aggregate: AggregateUserStats!
}

input UserStatsCreateInput {
  project_views: Int!
  project_appreciations: Int!
  project_comments: Int!
  profile_views: Int!
}

input UserStatsCreateOneInput {
  create: UserStatsCreateInput
}

"""
An edge in a connection.
"""
type UserStatsEdge {
  """
  The item at the end of the edge.
  """
  node: UserStats!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserStatsOrderByInput {
  project_views_ASC
  project_views_DESC
  project_appreciations_ASC
  project_appreciations_DESC
  project_comments_ASC
  project_comments_DESC
  profile_views_ASC
  profile_views_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserStatsPreviousValues {
  project_views: Int!
  project_appreciations: Int!
  project_comments: Int!
  profile_views: Int!
}

type UserStatsSubscriptionPayload {
  mutation: MutationType!
  node: UserStats
  updatedFields: [String!]
  previousValues: UserStatsPreviousValues
}

input UserStatsSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserStatsSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserStatsSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserStatsWhereInput
}

input UserStatsUpdateDataInput {
  project_views: Int
  project_appreciations: Int
  project_comments: Int
  profile_views: Int
}

input UserStatsUpdateInput {
  project_views: Int
  project_appreciations: Int
  project_comments: Int
  profile_views: Int
}

input UserStatsUpdateOneInput {
  create: UserStatsCreateInput
  disconnect: Boolean
  delete: Boolean
  update: UserStatsUpdateDataInput
  upsert: UserStatsUpsertNestedInput
}

input UserStatsUpsertNestedInput {
  update: UserStatsUpdateDataInput!
  create: UserStatsCreateInput!
}

input UserStatsWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserStatsWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserStatsWhereInput!]
  project_views: Int
  """
  All values that are not equal to given value.
  """
  project_views_not: Int
  """
  All values that are contained in given list.
  """
  project_views_in: [Int!]
  """
  All values that are not contained in given list.
  """
  project_views_not_in: [Int!]
  """
  All values less than the given value.
  """
  project_views_lt: Int
  """
  All values less than or equal the given value.
  """
  project_views_lte: Int
  """
  All values greater than the given value.
  """
  project_views_gt: Int
  """
  All values greater than or equal the given value.
  """
  project_views_gte: Int
  project_appreciations: Int
  """
  All values that are not equal to given value.
  """
  project_appreciations_not: Int
  """
  All values that are contained in given list.
  """
  project_appreciations_in: [Int!]
  """
  All values that are not contained in given list.
  """
  project_appreciations_not_in: [Int!]
  """
  All values less than the given value.
  """
  project_appreciations_lt: Int
  """
  All values less than or equal the given value.
  """
  project_appreciations_lte: Int
  """
  All values greater than the given value.
  """
  project_appreciations_gt: Int
  """
  All values greater than or equal the given value.
  """
  project_appreciations_gte: Int
  project_comments: Int
  """
  All values that are not equal to given value.
  """
  project_comments_not: Int
  """
  All values that are contained in given list.
  """
  project_comments_in: [Int!]
  """
  All values that are not contained in given list.
  """
  project_comments_not_in: [Int!]
  """
  All values less than the given value.
  """
  project_comments_lt: Int
  """
  All values less than or equal the given value.
  """
  project_comments_lte: Int
  """
  All values greater than the given value.
  """
  project_comments_gt: Int
  """
  All values greater than or equal the given value.
  """
  project_comments_gte: Int
  profile_views: Int
  """
  All values that are not equal to given value.
  """
  profile_views_not: Int
  """
  All values that are contained in given list.
  """
  profile_views_in: [Int!]
  """
  All values that are not contained in given list.
  """
  profile_views_not_in: [Int!]
  """
  All values less than the given value.
  """
  profile_views_lt: Int
  """
  All values less than or equal the given value.
  """
  profile_views_lte: Int
  """
  All values greater than the given value.
  """
  profile_views_gt: Int
  """
  All values greater than or equal the given value.
  """
  profile_views_gte: Int
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  first_name: String
  last_name: String
  username: String
  city: String
  state: String
  country: String
  company: String
  occupation: String
  created_on: Int
  url: String
  display_name: String
  twitter: String
  fields: UserUpdatefieldsInput
  links: LinkUpdateManyInput
  projects: ProjectUpdateManyWithoutOwnersInput
  wips: WipUpdateManyWithoutOwnerInput
  appreciations: AppreciationUpdateManyInput
  collections: CollectionUpdateManyWithoutOwnersInput
  stats: UserStatsByPeriodUpdateOneInput
  followers: UserUpdateManyWithoutFollowersInput
  following: UserUpdateManyWithoutFollowingInput
  workExperience: WorkExperienceUpdateManyInput
}

input UserUpdatefieldsInput {
  set: [String!]
}

input UserUpdateInput {
  first_name: String
  last_name: String
  username: String
  city: String
  state: String
  country: String
  company: String
  occupation: String
  created_on: Int
  url: String
  display_name: String
  twitter: String
  fields: UserUpdatefieldsInput
  links: LinkUpdateManyInput
  projects: ProjectUpdateManyWithoutOwnersInput
  wips: WipUpdateManyWithoutOwnerInput
  appreciations: AppreciationUpdateManyInput
  collections: CollectionUpdateManyWithoutOwnersInput
  stats: UserStatsByPeriodUpdateOneInput
  followers: UserUpdateManyWithoutFollowersInput
  following: UserUpdateManyWithoutFollowingInput
  workExperience: WorkExperienceUpdateManyInput
}

input UserUpdateManyWithoutCollectionsInput {
  create: [UserCreateWithoutCollectionsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCollectionsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCollectionsInput!]
}

input UserUpdateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
}

input UserUpdateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
}

input UserUpdateManyWithoutProjectsInput {
  create: [UserCreateWithoutProjectsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutProjectsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutProjectsInput!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutWipsInput {
  create: UserCreateWithoutWipsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutWipsDataInput
  upsert: UserUpsertWithoutWipsInput
}

input UserUpdateWithoutCollectionsDataInput {
  first_name: String
  last_name: String
  username: String
  city: String
  state: String
  country: String
  company: String
  occupation: String
  created_on: Int
  url: String
  display_name: String
  twitter: String
  fields: UserUpdatefieldsInput
  links: LinkUpdateManyInput
  projects: ProjectUpdateManyWithoutOwnersInput
  wips: WipUpdateManyWithoutOwnerInput
  appreciations: AppreciationUpdateManyInput
  stats: UserStatsByPeriodUpdateOneInput
  followers: UserUpdateManyWithoutFollowersInput
  following: UserUpdateManyWithoutFollowingInput
  workExperience: WorkExperienceUpdateManyInput
}

input UserUpdateWithoutFollowersDataInput {
  first_name: String
  last_name: String
  username: String
  city: String
  state: String
  country: String
  company: String
  occupation: String
  created_on: Int
  url: String
  display_name: String
  twitter: String
  fields: UserUpdatefieldsInput
  links: LinkUpdateManyInput
  projects: ProjectUpdateManyWithoutOwnersInput
  wips: WipUpdateManyWithoutOwnerInput
  appreciations: AppreciationUpdateManyInput
  collections: CollectionUpdateManyWithoutOwnersInput
  stats: UserStatsByPeriodUpdateOneInput
  following: UserUpdateManyWithoutFollowingInput
  workExperience: WorkExperienceUpdateManyInput
}

input UserUpdateWithoutFollowingDataInput {
  first_name: String
  last_name: String
  username: String
  city: String
  state: String
  country: String
  company: String
  occupation: String
  created_on: Int
  url: String
  display_name: String
  twitter: String
  fields: UserUpdatefieldsInput
  links: LinkUpdateManyInput
  projects: ProjectUpdateManyWithoutOwnersInput
  wips: WipUpdateManyWithoutOwnerInput
  appreciations: AppreciationUpdateManyInput
  collections: CollectionUpdateManyWithoutOwnersInput
  stats: UserStatsByPeriodUpdateOneInput
  followers: UserUpdateManyWithoutFollowersInput
  workExperience: WorkExperienceUpdateManyInput
}

input UserUpdateWithoutProjectsDataInput {
  first_name: String
  last_name: String
  username: String
  city: String
  state: String
  country: String
  company: String
  occupation: String
  created_on: Int
  url: String
  display_name: String
  twitter: String
  fields: UserUpdatefieldsInput
  links: LinkUpdateManyInput
  wips: WipUpdateManyWithoutOwnerInput
  appreciations: AppreciationUpdateManyInput
  collections: CollectionUpdateManyWithoutOwnersInput
  stats: UserStatsByPeriodUpdateOneInput
  followers: UserUpdateManyWithoutFollowersInput
  following: UserUpdateManyWithoutFollowingInput
  workExperience: WorkExperienceUpdateManyInput
}

input UserUpdateWithoutWipsDataInput {
  first_name: String
  last_name: String
  username: String
  city: String
  state: String
  country: String
  company: String
  occupation: String
  created_on: Int
  url: String
  display_name: String
  twitter: String
  fields: UserUpdatefieldsInput
  links: LinkUpdateManyInput
  projects: ProjectUpdateManyWithoutOwnersInput
  appreciations: AppreciationUpdateManyInput
  collections: CollectionUpdateManyWithoutOwnersInput
  stats: UserStatsByPeriodUpdateOneInput
  followers: UserUpdateManyWithoutFollowersInput
  following: UserUpdateManyWithoutFollowingInput
  workExperience: WorkExperienceUpdateManyInput
}

input UserUpdateWithWhereUniqueWithoutCollectionsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCollectionsDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowersDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowingDataInput!
}

input UserUpdateWithWhereUniqueWithoutProjectsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutProjectsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutWipsInput {
  update: UserUpdateWithoutWipsDataInput!
  create: UserCreateWithoutWipsInput!
}

input UserUpsertWithWhereUniqueWithoutCollectionsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCollectionsDataInput!
  create: UserCreateWithoutCollectionsInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowersDataInput!
  create: UserCreateWithoutFollowersInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowingDataInput!
  create: UserCreateWithoutFollowingInput!
}

input UserUpsertWithWhereUniqueWithoutProjectsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutProjectsDataInput!
  create: UserCreateWithoutProjectsInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  first_name: String
  """
  All values that are not equal to given value.
  """
  first_name_not: String
  """
  All values that are contained in given list.
  """
  first_name_in: [String!]
  """
  All values that are not contained in given list.
  """
  first_name_not_in: [String!]
  """
  All values less than the given value.
  """
  first_name_lt: String
  """
  All values less than or equal the given value.
  """
  first_name_lte: String
  """
  All values greater than the given value.
  """
  first_name_gt: String
  """
  All values greater than or equal the given value.
  """
  first_name_gte: String
  """
  All values containing the given string.
  """
  first_name_contains: String
  """
  All values not containing the given string.
  """
  first_name_not_contains: String
  """
  All values starting with the given string.
  """
  first_name_starts_with: String
  """
  All values not starting with the given string.
  """
  first_name_not_starts_with: String
  """
  All values ending with the given string.
  """
  first_name_ends_with: String
  """
  All values not ending with the given string.
  """
  first_name_not_ends_with: String
  last_name: String
  """
  All values that are not equal to given value.
  """
  last_name_not: String
  """
  All values that are contained in given list.
  """
  last_name_in: [String!]
  """
  All values that are not contained in given list.
  """
  last_name_not_in: [String!]
  """
  All values less than the given value.
  """
  last_name_lt: String
  """
  All values less than or equal the given value.
  """
  last_name_lte: String
  """
  All values greater than the given value.
  """
  last_name_gt: String
  """
  All values greater than or equal the given value.
  """
  last_name_gte: String
  """
  All values containing the given string.
  """
  last_name_contains: String
  """
  All values not containing the given string.
  """
  last_name_not_contains: String
  """
  All values starting with the given string.
  """
  last_name_starts_with: String
  """
  All values not starting with the given string.
  """
  last_name_not_starts_with: String
  """
  All values ending with the given string.
  """
  last_name_ends_with: String
  """
  All values not ending with the given string.
  """
  last_name_not_ends_with: String
  username: String
  """
  All values that are not equal to given value.
  """
  username_not: String
  """
  All values that are contained in given list.
  """
  username_in: [String!]
  """
  All values that are not contained in given list.
  """
  username_not_in: [String!]
  """
  All values less than the given value.
  """
  username_lt: String
  """
  All values less than or equal the given value.
  """
  username_lte: String
  """
  All values greater than the given value.
  """
  username_gt: String
  """
  All values greater than or equal the given value.
  """
  username_gte: String
  """
  All values containing the given string.
  """
  username_contains: String
  """
  All values not containing the given string.
  """
  username_not_contains: String
  """
  All values starting with the given string.
  """
  username_starts_with: String
  """
  All values not starting with the given string.
  """
  username_not_starts_with: String
  """
  All values ending with the given string.
  """
  username_ends_with: String
  """
  All values not ending with the given string.
  """
  username_not_ends_with: String
  city: String
  """
  All values that are not equal to given value.
  """
  city_not: String
  """
  All values that are contained in given list.
  """
  city_in: [String!]
  """
  All values that are not contained in given list.
  """
  city_not_in: [String!]
  """
  All values less than the given value.
  """
  city_lt: String
  """
  All values less than or equal the given value.
  """
  city_lte: String
  """
  All values greater than the given value.
  """
  city_gt: String
  """
  All values greater than or equal the given value.
  """
  city_gte: String
  """
  All values containing the given string.
  """
  city_contains: String
  """
  All values not containing the given string.
  """
  city_not_contains: String
  """
  All values starting with the given string.
  """
  city_starts_with: String
  """
  All values not starting with the given string.
  """
  city_not_starts_with: String
  """
  All values ending with the given string.
  """
  city_ends_with: String
  """
  All values not ending with the given string.
  """
  city_not_ends_with: String
  state: String
  """
  All values that are not equal to given value.
  """
  state_not: String
  """
  All values that are contained in given list.
  """
  state_in: [String!]
  """
  All values that are not contained in given list.
  """
  state_not_in: [String!]
  """
  All values less than the given value.
  """
  state_lt: String
  """
  All values less than or equal the given value.
  """
  state_lte: String
  """
  All values greater than the given value.
  """
  state_gt: String
  """
  All values greater than or equal the given value.
  """
  state_gte: String
  """
  All values containing the given string.
  """
  state_contains: String
  """
  All values not containing the given string.
  """
  state_not_contains: String
  """
  All values starting with the given string.
  """
  state_starts_with: String
  """
  All values not starting with the given string.
  """
  state_not_starts_with: String
  """
  All values ending with the given string.
  """
  state_ends_with: String
  """
  All values not ending with the given string.
  """
  state_not_ends_with: String
  country: String
  """
  All values that are not equal to given value.
  """
  country_not: String
  """
  All values that are contained in given list.
  """
  country_in: [String!]
  """
  All values that are not contained in given list.
  """
  country_not_in: [String!]
  """
  All values less than the given value.
  """
  country_lt: String
  """
  All values less than or equal the given value.
  """
  country_lte: String
  """
  All values greater than the given value.
  """
  country_gt: String
  """
  All values greater than or equal the given value.
  """
  country_gte: String
  """
  All values containing the given string.
  """
  country_contains: String
  """
  All values not containing the given string.
  """
  country_not_contains: String
  """
  All values starting with the given string.
  """
  country_starts_with: String
  """
  All values not starting with the given string.
  """
  country_not_starts_with: String
  """
  All values ending with the given string.
  """
  country_ends_with: String
  """
  All values not ending with the given string.
  """
  country_not_ends_with: String
  company: String
  """
  All values that are not equal to given value.
  """
  company_not: String
  """
  All values that are contained in given list.
  """
  company_in: [String!]
  """
  All values that are not contained in given list.
  """
  company_not_in: [String!]
  """
  All values less than the given value.
  """
  company_lt: String
  """
  All values less than or equal the given value.
  """
  company_lte: String
  """
  All values greater than the given value.
  """
  company_gt: String
  """
  All values greater than or equal the given value.
  """
  company_gte: String
  """
  All values containing the given string.
  """
  company_contains: String
  """
  All values not containing the given string.
  """
  company_not_contains: String
  """
  All values starting with the given string.
  """
  company_starts_with: String
  """
  All values not starting with the given string.
  """
  company_not_starts_with: String
  """
  All values ending with the given string.
  """
  company_ends_with: String
  """
  All values not ending with the given string.
  """
  company_not_ends_with: String
  occupation: String
  """
  All values that are not equal to given value.
  """
  occupation_not: String
  """
  All values that are contained in given list.
  """
  occupation_in: [String!]
  """
  All values that are not contained in given list.
  """
  occupation_not_in: [String!]
  """
  All values less than the given value.
  """
  occupation_lt: String
  """
  All values less than or equal the given value.
  """
  occupation_lte: String
  """
  All values greater than the given value.
  """
  occupation_gt: String
  """
  All values greater than or equal the given value.
  """
  occupation_gte: String
  """
  All values containing the given string.
  """
  occupation_contains: String
  """
  All values not containing the given string.
  """
  occupation_not_contains: String
  """
  All values starting with the given string.
  """
  occupation_starts_with: String
  """
  All values not starting with the given string.
  """
  occupation_not_starts_with: String
  """
  All values ending with the given string.
  """
  occupation_ends_with: String
  """
  All values not ending with the given string.
  """
  occupation_not_ends_with: String
  created_on: Int
  """
  All values that are not equal to given value.
  """
  created_on_not: Int
  """
  All values that are contained in given list.
  """
  created_on_in: [Int!]
  """
  All values that are not contained in given list.
  """
  created_on_not_in: [Int!]
  """
  All values less than the given value.
  """
  created_on_lt: Int
  """
  All values less than or equal the given value.
  """
  created_on_lte: Int
  """
  All values greater than the given value.
  """
  created_on_gt: Int
  """
  All values greater than or equal the given value.
  """
  created_on_gte: Int
  url: String
  """
  All values that are not equal to given value.
  """
  url_not: String
  """
  All values that are contained in given list.
  """
  url_in: [String!]
  """
  All values that are not contained in given list.
  """
  url_not_in: [String!]
  """
  All values less than the given value.
  """
  url_lt: String
  """
  All values less than or equal the given value.
  """
  url_lte: String
  """
  All values greater than the given value.
  """
  url_gt: String
  """
  All values greater than or equal the given value.
  """
  url_gte: String
  """
  All values containing the given string.
  """
  url_contains: String
  """
  All values not containing the given string.
  """
  url_not_contains: String
  """
  All values starting with the given string.
  """
  url_starts_with: String
  """
  All values not starting with the given string.
  """
  url_not_starts_with: String
  """
  All values ending with the given string.
  """
  url_ends_with: String
  """
  All values not ending with the given string.
  """
  url_not_ends_with: String
  display_name: String
  """
  All values that are not equal to given value.
  """
  display_name_not: String
  """
  All values that are contained in given list.
  """
  display_name_in: [String!]
  """
  All values that are not contained in given list.
  """
  display_name_not_in: [String!]
  """
  All values less than the given value.
  """
  display_name_lt: String
  """
  All values less than or equal the given value.
  """
  display_name_lte: String
  """
  All values greater than the given value.
  """
  display_name_gt: String
  """
  All values greater than or equal the given value.
  """
  display_name_gte: String
  """
  All values containing the given string.
  """
  display_name_contains: String
  """
  All values not containing the given string.
  """
  display_name_not_contains: String
  """
  All values starting with the given string.
  """
  display_name_starts_with: String
  """
  All values not starting with the given string.
  """
  display_name_not_starts_with: String
  """
  All values ending with the given string.
  """
  display_name_ends_with: String
  """
  All values not ending with the given string.
  """
  display_name_not_ends_with: String
  twitter: String
  """
  All values that are not equal to given value.
  """
  twitter_not: String
  """
  All values that are contained in given list.
  """
  twitter_in: [String!]
  """
  All values that are not contained in given list.
  """
  twitter_not_in: [String!]
  """
  All values less than the given value.
  """
  twitter_lt: String
  """
  All values less than or equal the given value.
  """
  twitter_lte: String
  """
  All values greater than the given value.
  """
  twitter_gt: String
  """
  All values greater than or equal the given value.
  """
  twitter_gte: String
  """
  All values containing the given string.
  """
  twitter_contains: String
  """
  All values not containing the given string.
  """
  twitter_not_contains: String
  """
  All values starting with the given string.
  """
  twitter_starts_with: String
  """
  All values not starting with the given string.
  """
  twitter_not_starts_with: String
  """
  All values ending with the given string.
  """
  twitter_ends_with: String
  """
  All values not ending with the given string.
  """
  twitter_not_ends_with: String
  links_every: LinkWhereInput
  links_some: LinkWhereInput
  links_none: LinkWhereInput
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
  wips_every: WipWhereInput
  wips_some: WipWhereInput
  wips_none: WipWhereInput
  appreciations_every: AppreciationWhereInput
  appreciations_some: AppreciationWhereInput
  appreciations_none: AppreciationWhereInput
  collections_every: CollectionWhereInput
  collections_some: CollectionWhereInput
  collections_none: CollectionWhereInput
  stats: UserStatsByPeriodWhereInput
  followers_every: UserWhereInput
  followers_some: UserWhereInput
  followers_none: UserWhereInput
  following_every: UserWhereInput
  following_some: UserWhereInput
  following_none: UserWhereInput
  workExperience_every: WorkExperienceWhereInput
  workExperience_some: WorkExperienceWhereInput
  workExperience_none: WorkExperienceWhereInput
}

input UserWhereUniqueInput {
  id: ID
  username: String
}

"""
A connection to a list of items.
"""
type WipConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [WipEdge]!
  aggregate: AggregateWip!
}

input WipCreateInput {
  created_on: Int!
  privacy: String!
  title: String
  url: String
  owner: UserCreateOneWithoutWipsInput!
  revisions: RevisionCreateManyInput
  stats: WipStatsCreateOneInput!
}

input WipCreateManyWithoutOwnerInput {
  create: [WipCreateWithoutOwnerInput!]
  connect: [WipWhereUniqueInput!]
}

input WipCreateWithoutOwnerInput {
  created_on: Int!
  privacy: String!
  title: String
  url: String
  revisions: RevisionCreateManyInput
  stats: WipStatsCreateOneInput!
}

"""
An edge in a connection.
"""
type WipEdge {
  """
  The item at the end of the edge.
  """
  node: Wip!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum WipOrderByInput {
  id_ASC
  id_DESC
  created_on_ASC
  created_on_DESC
  privacy_ASC
  privacy_DESC
  title_ASC
  title_DESC
  url_ASC
  url_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WipPreviousValues {
  id: ID!
  created_on: Int!
  privacy: String!
  title: String
  url: String
}

type WipStats {
  comments: Int!
  revisions: Int!
  views: Int!
}

"""
A connection to a list of items.
"""
type WipStatsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [WipStatsEdge]!
  aggregate: AggregateWipStats!
}

input WipStatsCreateInput {
  comments: Int!
  revisions: Int!
  views: Int!
}

input WipStatsCreateOneInput {
  create: WipStatsCreateInput
}

"""
An edge in a connection.
"""
type WipStatsEdge {
  """
  The item at the end of the edge.
  """
  node: WipStats!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum WipStatsOrderByInput {
  comments_ASC
  comments_DESC
  revisions_ASC
  revisions_DESC
  views_ASC
  views_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WipStatsPreviousValues {
  comments: Int!
  revisions: Int!
  views: Int!
}

type WipStatsSubscriptionPayload {
  mutation: MutationType!
  node: WipStats
  updatedFields: [String!]
  previousValues: WipStatsPreviousValues
}

input WipStatsSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WipStatsSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [WipStatsSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WipStatsWhereInput
}

input WipStatsUpdateDataInput {
  comments: Int
  revisions: Int
  views: Int
}

input WipStatsUpdateInput {
  comments: Int
  revisions: Int
  views: Int
}

input WipStatsUpdateOneInput {
  create: WipStatsCreateInput
  disconnect: Boolean
  delete: Boolean
  update: WipStatsUpdateDataInput
  upsert: WipStatsUpsertNestedInput
}

input WipStatsUpsertNestedInput {
  update: WipStatsUpdateDataInput!
  create: WipStatsCreateInput!
}

input WipStatsWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WipStatsWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [WipStatsWhereInput!]
  comments: Int
  """
  All values that are not equal to given value.
  """
  comments_not: Int
  """
  All values that are contained in given list.
  """
  comments_in: [Int!]
  """
  All values that are not contained in given list.
  """
  comments_not_in: [Int!]
  """
  All values less than the given value.
  """
  comments_lt: Int
  """
  All values less than or equal the given value.
  """
  comments_lte: Int
  """
  All values greater than the given value.
  """
  comments_gt: Int
  """
  All values greater than or equal the given value.
  """
  comments_gte: Int
  revisions: Int
  """
  All values that are not equal to given value.
  """
  revisions_not: Int
  """
  All values that are contained in given list.
  """
  revisions_in: [Int!]
  """
  All values that are not contained in given list.
  """
  revisions_not_in: [Int!]
  """
  All values less than the given value.
  """
  revisions_lt: Int
  """
  All values less than or equal the given value.
  """
  revisions_lte: Int
  """
  All values greater than the given value.
  """
  revisions_gt: Int
  """
  All values greater than or equal the given value.
  """
  revisions_gte: Int
  views: Int
  """
  All values that are not equal to given value.
  """
  views_not: Int
  """
  All values that are contained in given list.
  """
  views_in: [Int!]
  """
  All values that are not contained in given list.
  """
  views_not_in: [Int!]
  """
  All values less than the given value.
  """
  views_lt: Int
  """
  All values less than or equal the given value.
  """
  views_lte: Int
  """
  All values greater than the given value.
  """
  views_gt: Int
  """
  All values greater than or equal the given value.
  """
  views_gte: Int
}

type WipSubscriptionPayload {
  mutation: MutationType!
  node: Wip
  updatedFields: [String!]
  previousValues: WipPreviousValues
}

input WipSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WipSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [WipSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WipWhereInput
}

input WipUpdateInput {
  created_on: Int
  privacy: String
  title: String
  url: String
  owner: UserUpdateOneWithoutWipsInput
  revisions: RevisionUpdateManyInput
  stats: WipStatsUpdateOneInput
}

input WipUpdateManyWithoutOwnerInput {
  create: [WipCreateWithoutOwnerInput!]
  connect: [WipWhereUniqueInput!]
  disconnect: [WipWhereUniqueInput!]
  delete: [WipWhereUniqueInput!]
  update: [WipUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [WipUpsertWithWhereUniqueWithoutOwnerInput!]
}

input WipUpdateWithoutOwnerDataInput {
  created_on: Int
  privacy: String
  title: String
  url: String
  revisions: RevisionUpdateManyInput
  stats: WipStatsUpdateOneInput
}

input WipUpdateWithWhereUniqueWithoutOwnerInput {
  where: WipWhereUniqueInput!
  data: WipUpdateWithoutOwnerDataInput!
}

input WipUpsertWithWhereUniqueWithoutOwnerInput {
  where: WipWhereUniqueInput!
  update: WipUpdateWithoutOwnerDataInput!
  create: WipCreateWithoutOwnerInput!
}

input WipWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WipWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [WipWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  created_on: Int
  """
  All values that are not equal to given value.
  """
  created_on_not: Int
  """
  All values that are contained in given list.
  """
  created_on_in: [Int!]
  """
  All values that are not contained in given list.
  """
  created_on_not_in: [Int!]
  """
  All values less than the given value.
  """
  created_on_lt: Int
  """
  All values less than or equal the given value.
  """
  created_on_lte: Int
  """
  All values greater than the given value.
  """
  created_on_gt: Int
  """
  All values greater than or equal the given value.
  """
  created_on_gte: Int
  privacy: String
  """
  All values that are not equal to given value.
  """
  privacy_not: String
  """
  All values that are contained in given list.
  """
  privacy_in: [String!]
  """
  All values that are not contained in given list.
  """
  privacy_not_in: [String!]
  """
  All values less than the given value.
  """
  privacy_lt: String
  """
  All values less than or equal the given value.
  """
  privacy_lte: String
  """
  All values greater than the given value.
  """
  privacy_gt: String
  """
  All values greater than or equal the given value.
  """
  privacy_gte: String
  """
  All values containing the given string.
  """
  privacy_contains: String
  """
  All values not containing the given string.
  """
  privacy_not_contains: String
  """
  All values starting with the given string.
  """
  privacy_starts_with: String
  """
  All values not starting with the given string.
  """
  privacy_not_starts_with: String
  """
  All values ending with the given string.
  """
  privacy_ends_with: String
  """
  All values not ending with the given string.
  """
  privacy_not_ends_with: String
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  url: String
  """
  All values that are not equal to given value.
  """
  url_not: String
  """
  All values that are contained in given list.
  """
  url_in: [String!]
  """
  All values that are not contained in given list.
  """
  url_not_in: [String!]
  """
  All values less than the given value.
  """
  url_lt: String
  """
  All values less than or equal the given value.
  """
  url_lte: String
  """
  All values greater than the given value.
  """
  url_gt: String
  """
  All values greater than or equal the given value.
  """
  url_gte: String
  """
  All values containing the given string.
  """
  url_contains: String
  """
  All values not containing the given string.
  """
  url_not_contains: String
  """
  All values starting with the given string.
  """
  url_starts_with: String
  """
  All values not starting with the given string.
  """
  url_not_starts_with: String
  """
  All values ending with the given string.
  """
  url_ends_with: String
  """
  All values not ending with the given string.
  """
  url_not_ends_with: String
  owner: UserWhereInput
  revisions_every: RevisionWhereInput
  revisions_some: RevisionWhereInput
  revisions_none: RevisionWhereInput
  stats: WipStatsWhereInput
}

input WipWhereUniqueInput {
  id: ID
}

type WorkExperience {
  position: String!
  organization: String!
  location: String!
}

"""
A connection to a list of items.
"""
type WorkExperienceConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [WorkExperienceEdge]!
  aggregate: AggregateWorkExperience!
}

input WorkExperienceCreateInput {
  position: String!
  organization: String!
  location: String!
}

input WorkExperienceCreateManyInput {
  create: [WorkExperienceCreateInput!]
}

"""
An edge in a connection.
"""
type WorkExperienceEdge {
  """
  The item at the end of the edge.
  """
  node: WorkExperience!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum WorkExperienceOrderByInput {
  position_ASC
  position_DESC
  organization_ASC
  organization_DESC
  location_ASC
  location_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkExperiencePreviousValues {
  position: String!
  organization: String!
  location: String!
}

type WorkExperienceSubscriptionPayload {
  mutation: MutationType!
  node: WorkExperience
  updatedFields: [String!]
  previousValues: WorkExperiencePreviousValues
}

input WorkExperienceSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WorkExperienceSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [WorkExperienceSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WorkExperienceWhereInput
}

input WorkExperienceUpdateInput {
  position: String
  organization: String
  location: String
}

input WorkExperienceUpdateManyInput {
  create: [WorkExperienceCreateInput!]
}

input WorkExperienceWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WorkExperienceWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [WorkExperienceWhereInput!]
  position: String
  """
  All values that are not equal to given value.
  """
  position_not: String
  """
  All values that are contained in given list.
  """
  position_in: [String!]
  """
  All values that are not contained in given list.
  """
  position_not_in: [String!]
  """
  All values less than the given value.
  """
  position_lt: String
  """
  All values less than or equal the given value.
  """
  position_lte: String
  """
  All values greater than the given value.
  """
  position_gt: String
  """
  All values greater than or equal the given value.
  """
  position_gte: String
  """
  All values containing the given string.
  """
  position_contains: String
  """
  All values not containing the given string.
  """
  position_not_contains: String
  """
  All values starting with the given string.
  """
  position_starts_with: String
  """
  All values not starting with the given string.
  """
  position_not_starts_with: String
  """
  All values ending with the given string.
  """
  position_ends_with: String
  """
  All values not ending with the given string.
  """
  position_not_ends_with: String
  organization: String
  """
  All values that are not equal to given value.
  """
  organization_not: String
  """
  All values that are contained in given list.
  """
  organization_in: [String!]
  """
  All values that are not contained in given list.
  """
  organization_not_in: [String!]
  """
  All values less than the given value.
  """
  organization_lt: String
  """
  All values less than or equal the given value.
  """
  organization_lte: String
  """
  All values greater than the given value.
  """
  organization_gt: String
  """
  All values greater than or equal the given value.
  """
  organization_gte: String
  """
  All values containing the given string.
  """
  organization_contains: String
  """
  All values not containing the given string.
  """
  organization_not_contains: String
  """
  All values starting with the given string.
  """
  organization_starts_with: String
  """
  All values not starting with the given string.
  """
  organization_not_starts_with: String
  """
  All values ending with the given string.
  """
  organization_ends_with: String
  """
  All values not ending with the given string.
  """
  organization_not_ends_with: String
  location: String
  """
  All values that are not equal to given value.
  """
  location_not: String
  """
  All values that are contained in given list.
  """
  location_in: [String!]
  """
  All values that are not contained in given list.
  """
  location_not_in: [String!]
  """
  All values less than the given value.
  """
  location_lt: String
  """
  All values less than or equal the given value.
  """
  location_lte: String
  """
  All values greater than the given value.
  """
  location_gt: String
  """
  All values greater than or equal the given value.
  """
  location_gte: String
  """
  All values containing the given string.
  """
  location_contains: String
  """
  All values not containing the given string.
  """
  location_not_contains: String
  """
  All values starting with the given string.
  """
  location_starts_with: String
  """
  All values not starting with the given string.
  """
  location_not_starts_with: String
  """
  All values ending with the given string.
  """
  location_ends_with: String
  """
  All values not ending with the given string.
  """
  location_not_ends_with: String
}
