# import Appreciation, Collection, Comment, Field, Link, Project, User, UserStatsByPeriod, Wip from "./generated/prisma.graphql"

type Query {
    projects(params: ProjectsInput): [Project!]!
    project(id: ID!): Project!
    projectComments(id: ID!): [Comment!]!
    fields: [Field!]!
    creativesToFollow: [User!]!
    collections(params: CollectionsInput): [Collection!]!
    collection(id: ID!): Collection!
    collectionProjects(id: ID!): [Project!]!
    users(params: UsersInput): [User!]
    user(id: ID!): UserPayload!
    userProjects(id: ID!, params: UserProjectsInput): [Project!]
    userWips(id: ID!, params: UserProjectsInput): [Wip!]
    userAppreciations(id: ID!, params: UserAppreciationsInput): [Appreciation!]
    userCollections(id: ID!, params: UserCollectionsInput): [Collection!]
    userStats(id: ID!): UserStatsByPeriod!
}

type Mutation {
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
}

# TODO Compose with User
type UserPayload {
    id: ID!
    first_name: String!
    last_name: String!
    username: String!
    city: String
    state: String
    country: String
    company: String
    occupation: String
    created_on: Int!
    url: String!
    display_name: String!
    fields: [String!]!
    twitter: String
    links: [Link!]
}

type AuthPayload {
    token: String
    user: User
}

input ProjectsInput {
    q: String
    sort: ProjectSortBy
    time: Period
    field: String
    country: String
    state: String
    city: String
    page: Int
    tags: String
    color_hex: String
    color_range: Int
    license: String
}

input UsersInput {
    q: String
    field: String
    country: String
    state: String
    city: String
    page: Int
    tags: String
    sort: UserSortBy
}

input UserProjectsInput {
    sort: ProjectSortBy
    time: Period
    page: Int
}

input UserAppreciationsInput {
    page: Int
}

input UserCollectionsInput {
    time: Period
    page: String
    sort: CollectionSortBy
}

input CollectionsInput {
    q: String
    time: Period
    page: String
    sort: CollectionSortBy
}

enum Period {
    all
    today
    week
    month
}

enum ProjectSortBy {
    featured_date
    appreciations
    views
    comments
    published_date
}

enum UserSortBy {
    featured_date
    appreciations
    views
    comments
    published_date
    followed
}

enum CollectionSortBy {
    comments
    views
    last_item_added_date
}
